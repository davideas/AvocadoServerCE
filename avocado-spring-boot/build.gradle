apply plugin: 'java'
apply plugin: 'flyway'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'war'
apply plugin: 'idea' // https://docs.gradle.org/3.3/userguide/idea_plugin.html

group = 'eu.davidea'
version = '0.0.1-SNAPSHOT'
description = 'An opinionated setup for a modern RESTful Server'
sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
    appName = 'Avocado Server Community Edition'
    builtBy = System.properties['user.name'] + "@" + getTimestamp()
}

// load config for active profile
def propertyDrivenProfile = configForActiveProfile()

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

configurations {
    providedRuntime
    compile.exclude module: 'spring-boot-starter-tomcat' // We use external Tomcat
    compile.exclude group: 'org.apache.tomcat' // We use external Tomcat
    compile.exclude group: 'org.yaml' // Not used
    compile.exclude group: 'org.objenesis' // Not used
    compile.exclude group: 'org.ow2.asm' // Not used
    compile.exclude group: 'commons-logging' // We use Log4j2
    compile.exclude group: 'ch.qos.logback' // We use Log4j2
    compile.exclude group: 'junit' // We use JUnit 5 Jupiter, for Vintage include JUnit too
}

/*
 * Gradle dependencies tree
 * Run > gradle module:dependencies
 *       --configuration runtime | compile | testCompile | providedCompile  | providedRuntime
 *       --dependency artifactId
 */
dependencies {
    /*
     * Server libraries
     */
    compileOnly("javax.validation:validation-api:${javaxValidationVersion}")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-aop")
    //compile("org.springframework.boot:spring-boot-starter-security")
    // http://www.mindrot.org/projects/jBCrypt
    compile("de.svenkubiak:jBCrypt:0.4")
    // JWT implementation
    // https://github.com/auth0/java-jwt
    //compile("com.auth0:auth0-spring-security-api:${auth0SpringVersion}")
    //compile("com.auth0:java-jwt:${auth0Version}")
    // https://github.com/jwtk/jjwt
    compile("io.jsonwebtoken:jjwt:${jjwtVersion}")
    // Log4j2 via slf4j API. Configuration is per environment env/<env>/log4j2.xml
    compile("org.slf4j:slf4j-api:${slf4jVersion}")
    runtimeOnly("org.slf4j:jcl-over-slf4j:${slf4jVersion}")
    runtimeOnly("org.slf4j:log4j-over-slf4j:${slf4jVersion}")
    runtimeOnly("org.apache.logging.log4j:log4j-api:${log4j2Version}")
    runtimeOnly("org.apache.logging.log4j:log4j-core:${log4j2Version}")
    runtimeOnly("org.apache.logging.log4j:log4j-jcl:${log4j2Version}")
    runtimeOnly("org.apache.logging.log4j:log4j-web:${log4j2Version}")
    runtimeOnly("org.apache.logging.log4j:log4j-slf4j-impl:${log4j2Version}")
    // https://mvnrepository.com/artifact/com.lmax/disruptor
    runtimeOnly("com.lmax:disruptor:${log4j2DisruptorVersion}")
    // Servlet 3.1 are provided by Tomcat
    compileOnly("javax.servlet:javax.servlet-api:${servletApiVersion}")
    // We don't need to specify and include Tomcat library in our .war, neither that is provided
    //providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')

    /* - Hikari Connection Pool is configured in META-INF/context.xml
     *   Hikari is loaded on JNDI lookup by Tomcat and used when testing MyBatis to create a connection via JDBC.
     *   The library is already included in Spring Boot 2 but it is preferable to specify the latest version */
    compile("com.zaxxer:HikariCP:${hikariCPVersion}") {
        exclude group: 'org.slf4j' // We use the latest version SLF4J
    }
    // - Flyway for automatic database schema migration. Used in Gradle and at runtime only.
    runtimeOnly("org.flywaydb:flyway-core")
    // - MyBatis for SQL Mapping Framework for Java
    compile("org.mybatis.spring.boot:mybatis-spring-boot-starter:${myBatisBootVersion}")

    /*
     * Test libraries
     */
    // Enable use of the JUnitPlatform Runner within the IDE
    testCompile("org.junit.platform:junit-platform-runner:${junitPlatformVersion}")
    // We use JUnit 5 Jupiter
    testCompile("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")
    testRuntime("org.apache.logging.log4j:log4j-jul:${log4j2Version}")
    // Servlet Api are also needed
    testCompile("javax.servlet:javax.servlet-api:${servletApiVersion}")
    // Basic import for Spring Boot Test
    testCompile("org.springframework.boot:spring-boot-starter-test")
    // Specific MyBatis mapper tests
    testCompile("mysql:mysql-connector-java:${mysqlConnectorVersion}")
    testCompile("org.mybatis.spring.boot:mybatis-spring-boot-starter-test:${myBatisBootVersion}")
}

// Used by Flyway when Gradle is used in command line mode
// https://flywaydb.org/documentation/gradle/migrate
flyway {
    url = datasourceUrl
    driver = datasourceDriverClassName
    user = datasourceUsername
    password = datasourcePassword
}

junitPlatform {
    platformVersion junitPlatformVersion
    filters {
        engines {
            include 'junit-jupiter' // We only want to run JUnit Jupiter tests
            // include 'junit-vintage'
            // exclude 'custom-engine'
        }
        tags {
            // include 'fast'
            exclude 'slow'
        }
        // includeClassNamePattern '.*Test'
    }
    // enableStandardTestTask true
    // reportsDir file('build/test-results/junit-platform') // this is the default
    logManager 'org.apache.logging.log4j.jul.LogManager'
}

war {
    baseName = 'avocado-spring-boot'
    version = version
    archiveName = baseName + '-' + version + '.war'

    doLast {
        println "War build at: " + getTimestamp()
    }
}

/**
 * Explode the domain war when task 'war' ends.
 * Needed for local development when using Weblogic and deploying the exploded version
 */
task explodedWar(type: Copy) {
    into "$buildDir/libs/exploded/" + war.archiveName
    with war
}
war.dependsOn explodedWar

/**
 * Pre-process any needed resource file when copying it to WEB-INF/classes
 */
processResources {
    // Include Env configuration for specified profile
    from "../avocado-config/env/${propertyDrivenProfile}"
    exclude "**/*.gradle"
    exclude "**/config.properties"
    filesMatching("**/*.properties") { fcd ->
        fcd.expand(project.properties)
    }
}

/**
 * Helper functions.
 */

/**
 * @return current timestamp
 */
static def getTimestamp() {
    def date = new Date()
    return date.format('yyyy.MM.dd HH:mm')
}

/**
 * Configure the needed properties depending on user specified profile
 * (using 'gradle task -P profileName').
 *
 * @return active profile name
 */
def configForActiveProfile() {
    def activeProfile
    def base = '../avocado-config/env/'
    if (project.hasProperty('prod')) {
        // Used for production environment
        activeProfile = 'prod'
    } else if (project.hasProperty('acc')) {
        // Used for acceptance environment
        activeProfile = 'acc'
    } else {
        // Default when no profile property is specified, used for testing
        activeProfile = 'local'
    }
    println "Selected profile is: '${activeProfile}'"
    apply from: project.file(base + activeProfile + '/profile_' + activeProfile + '.gradle')
    return activeProfile
}
