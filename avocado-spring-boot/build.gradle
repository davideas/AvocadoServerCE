apply plugin: 'java'
apply plugin: 'flyway'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'war'
apply plugin: 'idea'

group 'eu.davidea'
version '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
    appName = 'Avocado Server Community Edition'
    builtBy = System.properties['user.name'] + "@" + getTimestamp()
}

// load config for active profile
def propertyDrivenProfile = configForActiveProfile()

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

configurations {
    providedRuntime
    compile.exclude module: 'spring-boot-starter-tomcat'
    compile.exclude group: 'org.apache.tomcat'
    compile.exclude group: 'com.zaxxer'
    compile.exclude group: 'ch.qos.logback'
}

dependencies {
    compile("javax.validation:validation-api:2.0.0.Final")
    compile('org.flywaydb:flyway-core')
    compile("org.mybatis.spring.boot:mybatis-spring-boot-starter:${myBatisBootVersion}")
    compile('org.springframework.boot:spring-boot-starter-web') {
        exclude module: "spring-boot-starter-tomcat"
    }

    // https://mvnrepository.com/artifact/mysql/mysql-connector-java
    compile("mysql:mysql-connector-java:6.0.6")

    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-log4j2
    compile("org.springframework.boot:spring-boot-starter-log4j2:${springBootVersion}")
    // https://mvnrepository.com/artifact/com.lmax/disruptor
    compile("com.lmax:disruptor:3.3.6")

    compileOnly("javax.servlet:javax.servlet-api:3.1.0")
    //providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')

    testCompile("javax.servlet:javax.servlet-api:3.1.0")
    testCompile('org.springframework.boot:spring-boot-starter-test')
    // Needed when testing Mybatis
    testCompile('commons-dbcp:commons-dbcp:1.4')
}

// Used by flyway when gradle is used in command line mode
flyway {
    url = datasourceUrl
    user = datasourceUsername
    password = datasourcePassword
    encoding = 'UTF-8'
}

war {
    baseName = 'avocadoce'
    version = version
    archiveName = baseName + '-' + version + '.war'

    doLast {
        println "War build at: " + getTimestamp()
    }
}

/**
 * Explode the domain war when task 'war' ends.
 * Needed for local development when using Weblogic and deploying the exploded version
 */
task explodedWar(type: Copy) {
    into "$buildDir/exploded"
    with war
}
war.dependsOn explodedWar

/**
 * Pre-process any needed resource file when copying it to WEB-INF/classes
 */
processResources {
    // Include Env configuration for specified profile
    from "../avocado-config/etc/env/$propertyDrivenProfile"
    exclude "**/*.gradle"
    filesMatching("**/*.properties") { fcd ->
        fcd.expand(project.properties)
    }
}

/**
 * Helper functions.
 */

/**
 * @return current timestamp
 */
static def getTimestamp() {
    def date = new Date()
    return date.format('yyyy.MM.dd HH:mm')
}

/**
 * Configure the needed properties depending on user specified profile ( using 'gradle task -PprofileName').
 *
 * @return active profile name
 */
def configForActiveProfile() {
    def activeProfile
    def base = '../avocado-config/etc/env/'
    if (project.hasProperty('prod')) {
        // Used for production environment
        activeProfile = 'prod'
        apply from: project.file(base + activeProfile + '/profile_prod.gradle');
    } else if (project.hasProperty('acc')) {
        // Used for acceptance environment
        activeProfile = 'acc'
        apply from: project.file(base + activeProfile + '/profile_acc.gradle');
    } else {
        // Default when no profile property is specified, used for testing
        activeProfile = 'local'
        apply from: project.file(base + activeProfile + '/profile_local.gradle');
    }
    println "Selected profile is: '${activeProfile}'"
    return activeProfile
}
