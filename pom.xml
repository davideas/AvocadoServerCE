<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<name>AvocadoServerCE</name>
	<groupId>eu.davidea</groupId>
	<artifactId>AvocadoServerCE</artifactId>
	<version>0.0.1-SNAPSHOT</version>

	<packaging>pom</packaging>

	<prerequisites>
		<maven>3.0</maven>
	</prerequisites>

	<organization>
		<name>Davidea Solutions</name>
		<url>http://www.davidea.eu</url>
	</organization>

	<properties>
		<build.timestamp>${maven.build.timestamp}</build.timestamp>
		<maven.build.timestamp.format>yyyy.MM.dd HH:mm:ss</maven.build.timestamp.format>
		<!-- Library versions for some of the libraries that have multiple artifacts -->
		<java.version>1.8</java.version>
		<spring.boot.version>2.0.0.M3</spring.boot.version>
		<javax.validation.version>2.0.0.Final</javax.validation.version>
		<servlet.version>3.1.0</servlet.version>
		<jBCrypt.version>0.4</jBCrypt.version>
		<mysql.version>6.0.6</mysql.version>
		<mybatis.version>1.3.0</mybatis.version>
		<hikari.version>2.6.3</hikari.version>
		<flyway.version>4.2.0</flyway.version>
		<slf4j.version>1.7.25</slf4j.version>
		<log4j2.version>2.8.2</log4j2.version>
		<log4j2.disruptor.version>3.3.6</log4j2.disruptor.version>
		<junit.platform.version>1.0.0-RC2</junit.platform.version>
		<junit.jupiter.version>5.0.0-RC2</junit.jupiter.version>
		<junit.vintage.version>4.12.0-RC2</junit.vintage.version>
	</properties>

	<!-- (you don't need this if you are using a .RELEASE version) -->
	<repositories>
		<repository>
			<id>spring-snapshots</id>
			<url>http://repo.spring.io/snapshot</url>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>spring-milestones</id>
			<url>http://repo.spring.io/milestone</url>
		</repository>
	</repositories>
	<pluginRepositories>
		<pluginRepository>
			<id>spring-snapshots</id>
			<url>http://repo.spring.io/snapshot</url>
		</pluginRepository>
		<pluginRepository>
			<id>spring-milestones</id>
			<url>http://repo.spring.io/milestone</url>
		</pluginRepository>
	</pluginRepositories>

	<dependencyManagement>
		<!-- Here we *declare* the versions and intended scope for all libraries used in the project.
			 Note that you still have to reference a certain library in the module's pom.xml so that it is used. -->
		<dependencies>
			<!-- Javax Annotations Validation -->
			<!-- https://mvnrepository.com/artifact/javax.validation/validation-api -->
			<dependency>
				<groupId>javax.validation</groupId>
				<artifactId>validation-api</artifactId>
				<version>${javax.validation.version}</version>
			</dependency>

			<!-- Import dependency management from Spring Boot -->
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter</artifactId>
				<version>${spring.boot.version}</version>
				<exclusions>
					<!-- We want slf4j & log4j2 instead -->
					<exclusion>
						<groupId>commons-logging</groupId>
						<artifactId>commons-logging</artifactId>
					</exclusion>
					<exclusion>
						<groupId>org.yaml</groupId>
						<artifactId>snakeyaml</artifactId>
					</exclusion>
					<exclusion>
						<groupId>org.objenesis</groupId>
						<artifactId>objenesis</artifactId>
					</exclusion>
					<exclusion>
						<groupId>org.ow2.asm</groupId>
						<artifactId>asm</artifactId>
					</exclusion>
					<exclusion>
						<groupId>ch.qos.logback</groupId>
						<artifactId>*</artifactId>
					</exclusion>
					<exclusion>
						<groupId>junit</groupId>
						<artifactId>junit</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			<!-- Add typical dependencies for a web application -->
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-web</artifactId>
				<version>${spring.boot.version}</version>
				<exclusions>
					<exclusion>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-starter-tomcat</artifactId>
					</exclusion>
					<exclusion>
						<groupId>org.apache.tomcat.embed</groupId>
						<artifactId>*</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-jdbc</artifactId>
				<version>${spring.boot.version}</version>
			</dependency>

			<!-- Servlet API -->
			<!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api -->
			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>javax.servlet-api</artifactId>
				<version>${servlet.version}</version>
				<scope>provided</scope>
			</dependency>

			<!-- MySql JConnector -->
			<!-- This allow a correct de-registration of the driver.
				(Copy the jar in the lib folder of the server -->
			<dependency>
				<groupId>mysql</groupId>
				<artifactId>mysql-connector-java</artifactId>
				<version>${mysql.version}</version>
				<scope>provided</scope>
			</dependency>
			<!-- https://mvnrepository.com/artifact/com.zaxxer/HikariCP -->
			<dependency>
				<groupId>com.zaxxer</groupId>
				<artifactId>HikariCP</artifactId>
				<version>${hikari.version}</version>
			</dependency>
			<!-- https://mvnrepository.com/artifact/org.flywaydb/flyway-core -->
			<dependency>
				<groupId>org.flywaydb</groupId>
				<artifactId>flyway-core</artifactId>
				<version>4.2.0</version>
				<scope>runtime</scope>
			</dependency>
			<!-- https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter -->
			<dependency>
				<groupId>org.mybatis.spring.boot</groupId>
				<artifactId>mybatis-spring-boot-starter</artifactId>
				<version>${mybatis.version}</version>
				<exclusions>
					<!-- MyBatis, here, pulls an old version of spring-jdbc -->
					<exclusion>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-starter-jdbc</artifactId>
					</exclusion>
				</exclusions>
			</dependency>

			<!-- jBCrypt -->
			<!-- http://www.mindrot.org/projects/jBCrypt -->
			<dependency>
				<groupId>de.svenkubiak</groupId>
				<artifactId>jBCrypt</artifactId>
				<version>${jBCrypt.version}</version>
			</dependency>

			<!-- Logging (slf4j) + Log4j2 -->
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-api</artifactId>
				<version>${slf4j.version}</version>
			</dependency>
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>jcl-over-slf4j</artifactId>
				<version>${slf4j.version}</version>
				<scope>runtime</scope>
			</dependency>
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>log4j-over-slf4j</artifactId>
				<version>${slf4j.version}</version>
				<scope>runtime</scope>
			</dependency>
			<dependency>
				<groupId>org.apache.logging.log4j</groupId>
				<artifactId>log4j-api</artifactId>
				<version>${log4j2.version}</version>
				<scope>runtime</scope>
			</dependency>
			<dependency>
				<groupId>org.apache.logging.log4j</groupId>
				<artifactId>log4j-core</artifactId>
				<version>${log4j2.version}</version>
				<scope>runtime</scope>
			</dependency>
			<dependency>
				<groupId>org.apache.logging.log4j</groupId>
				<artifactId>log4j-slf4j-impl</artifactId>
				<version>${log4j2.version}</version>
				<scope>runtime</scope>
			</dependency>
			<dependency>
				<groupId>org.apache.logging.log4j</groupId>
				<artifactId>log4j-web</artifactId>
				<version>${log4j2.version}</version>
				<scope>runtime</scope>
			</dependency>
			<dependency>
				<groupId>com.lmax</groupId>
				<artifactId>disruptor</artifactId>
				<version>${log4j2.disruptor.version}</version>
				<scope>runtime</scope>
			</dependency>

			<!-- JUnit -->
			<dependency>
				<groupId>org.junit.platform</groupId>
				<artifactId>junit-platform-runner</artifactId>
				<version>${junit.platform.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.junit.jupiter</groupId>
				<artifactId>junit-jupiter-engine</artifactId>
				<version>${junit.jupiter.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.junit.vintage</groupId>
				<artifactId>junit-vintage-engine</artifactId>
				<version>${junit.vintage.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-test</artifactId>
				<version>${spring.boot.version}</version>
				<scope>test</scope>
			</dependency>

		</dependencies>
	</dependencyManagement>

	<!-- Dependencies specified for all sub-modules -->
	<dependencies>
	</dependencies>

	<!-- Build information specified for all sub-modules -->
	<build>
		<!-- Build extensions -->
		<extensions>
			<!-- Enabling the use of FTP -->
			<extension>
				<groupId>org.apache.maven.wagon</groupId>
				<artifactId>wagon-ftp</artifactId>
				<version>2.12</version>
			</extension>
		</extensions>

		<!-- Here we *declare* the version and configuration for the plugins used.
			 The plugins will not be active unless referenced in the <plugin> section (except the standard plugins,
			 such as maven-compiler-plugin, which are part of the default lifecycle and thus always active.).

			 Any local configuration for a given plugin will override the entire definition here.
		-->
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.6.2</version>
					<configuration>
						<source>${java.version}</source>
						<target>${java.version}</target>
						<encoding>UTF-8</encoding>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-clean-plugin</artifactId>
					<version>3.0.0</version>
					<configuration>
						<filesets>
							<fileset>
								<!-- Clean Log folder generated when Running JUnit tests -->
								<directory>../logs</directory>
							</fileset>
						</filesets>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-war-plugin</artifactId>
					<version>3.1.0</version>
					<configuration>
						<webResources>
							<resource>
								<directory>src/main/webapp</directory>
								<filtering>true</filtering>
							</resource>
						</webResources>
						<!-- manifest customizations -->
						<archive>
							<manifest>
								<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
							</manifest>
							<manifestEntries>
								<Build-Time>${maven.build.timestamp}</Build-Time>
							</manifestEntries>
						</archive>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-resources-plugin</artifactId>
					<version>3.0.2</version>
					<configuration>
						<encoding>UTF-8</encoding>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>2.20</version>
					<dependencies>
						<dependency>
							<groupId>org.junit.platform</groupId>
							<artifactId>junit-platform-surefire-provider</artifactId>
							<version>${junit.platform.version}</version>
						</dependency>
					</dependencies>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-project-info-reports-plugin</artifactId>
					<version>2.9</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-install-plugin</artifactId>
					<version>2.5.2</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-remote-resources-plugin</artifactId>
					<version>1.5</version>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>build-helper-maven-plugin</artifactId>
					<version>3.0</version>
				</plugin>
			</plugins>
		</pluginManagement>

		<!-- Specify plugins to use for all sub-modules -->
		<plugins>
		</plugins>

		<!-- Specify classpath resources for all sub-modules -->
		<resources>
		</resources>
	</build>

	<!-- List the sub-modules to be built as part of this project. -->
	<modules>
		<module>avocado-spring</module>
		<module>avocado-spring-boot</module>
	</modules>

</project>